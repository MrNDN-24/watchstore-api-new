const Discount = require("../models/Discount");
const User = require("../models/User");

//1. L·∫•y danh s√°ch m√£ gi·∫£m gi√° theo ranks kh√°ch h√†ng
const getDiscounts = async (req, res) => {
  try {
    const currentDate = new Date();
    // üëâ Log ki·ªÉm tra xem req.user c√≥ t·ªìn t·∫°i kh√¥ng
    console.log("req.user:", req.user);

    // üëâ N·∫øu req.user kh√¥ng t·ªìn t·∫°i th√¨ tr·∫£ v·ªÅ l·ªói
    if (!req.user || !req.user._id) {
      return res
        .status(401)
        .json({ message: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng." });
    }

    // üëâ L·∫•y user hi·ªán t·∫°i t·ª´ middleware auth (gi·∫£ ƒë·ªãnh req.user._id c√≥ s·∫µn)
    const user = await User.findById(req.user._id);
    if (!user)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });

    const userRank = user.rank || "bronze"; // M·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ rank

    // Voucher ƒëang di·ªÖn ra ph√π h·ª£p v·ªõi rank
    const ongoingDiscounts = await Discount.find({
      isActive: true,
      isDelete: false,
      applicableRanks: userRank, // üéØ L·ªçc theo rank
      startDate: { $lte: currentDate },
      expirationDate: { $gt: currentDate },
    }).sort({ startDate: 1 });

    // Voucher s·∫Øp di·ªÖn ra ph√π h·ª£p v·ªõi rank
    const upcomingDiscounts = await Discount.find({
      isActive: true,
      isDelete: false,
      applicableRanks: userRank, // üéØ L·ªçc theo rank
      startDate: { $gt: currentDate },
    }).sort({ startDate: 1 });

    res.status(200).json({
      ongoingDiscounts,
      upcomingDiscounts,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch m√£ gi·∫£m gi√°." });
  }
};
// const getDiscounts = async (req, res) => {
//   try {
//     const currentDate = new Date(); // L·∫•y ng√†y hi·ªán t·∫°i

//     // Truy v·∫•n voucher ƒëang di·ªÖn ra
//     const ongoingDiscounts = await Discount.find({
//       isActive: true,
//       isDelete: false, // Kh√¥ng l·∫•y voucher ƒë√£ b·ªã x√≥a
//       startDate: { $lte: currentDate }, // Voucher ƒë√£ b·∫Øt ƒë·∫ßu (startDate <= hi·ªán t·∫°i)
//       expirationDate: { $gt: currentDate }, // Voucher ch∆∞a h·∫øt h·∫°n (expirationDate > hi·ªán t·∫°i)
//     }).sort({ startDate: 1 }); // S·∫Øp x·∫øp theo ng√†y b·∫Øt ƒë·∫ßu (tƒÉng d·∫ßn)

//     // Truy v·∫•n voucher s·∫Øp di·ªÖn ra (startDate > hi·ªán t·∫°i)
//     const upcomingDiscounts = await Discount.find({
//       isDelete: false,
//       isActive: true, // Kh√¥ng l·∫•y voucher ƒë√£ b·ªã x√≥a
//       startDate: { $gt: currentDate }, // Voucher ch∆∞a b·∫Øt ƒë·∫ßu (startDate > hi·ªán t·∫°i)
//     }).sort({ startDate: 1 }); // S·∫Øp x·∫øp theo ng√†y b·∫Øt ƒë·∫ßu (tƒÉng d·∫ßn)

//     // Tr·∫£ v·ªÅ 2 lo·∫°i voucher
//     res.status(200).json({
//       ongoingDiscounts,
//       upcomingDiscounts,
//     });
//   } catch (error) {
//     console.error(error);
//     res
//       .status(500)
//       .json({ message: "ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch m√£ gi·∫£m gi√°." });
//   }
// };

// 2. Ki·ªÉm tra m√£ gi·∫£m gi√° c√≥ h·ª£p l·ªá v·ªõi ng∆∞·ªùi d√πng kh√¥ng
const validateDiscountForUser = async (req, res) => {
  try {
    const { code } = req.params;
    const userId = req.user.id;

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ bi·∫øt rank
    const user = await User.findById(userId);
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }

    const userRank = user.rank || "bronze";

    const discount = await Discount.findOne({ code, isDelete: false });
    if (!discount) {
      return res
        .status(404)
        .json({ success: false, message: "M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i." });
    }

    const isValid = await discount.isValidForUser(userId, userRank);
    if (isValid) {
      res
        .status(200)
        .json({ success: true, message: "M√£ gi·∫£m gi√° h·ª£p l·ªá.", discount });
    } else {
      res.status(400).json({
        success: false,
        message: "M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá cho ng∆∞·ªùi d√πng n√†y.",
      });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({
      success: false,
      message: "ƒê√£ c√≥ l·ªói x·∫£y ra khi ki·ªÉm tra m√£ gi·∫£m gi√°.",
    });
  }
};

const rankPriority = {
  bronze: 1,
  silver: 2,
  gold: 3,
  platinum: 4,
  diamond: 5,
};

const getSuitableDiscount = async (req, res) => {
  try {
    const currentDate = new Date();

    // üëâ Log ki·ªÉm tra xem req.user c√≥ t·ªìn t·∫°i kh√¥ng
    console.log("req.user:", req.user);

    if (!req.user || !req.user._id) {
      return res
        .status(401)
        .json({ message: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng." });
    }

    const user = await User.findById(req.user._id);
    if (!user)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });

    const userRank = user.rank || "bronze";
    const userRankPriority = rankPriority[userRank];

    // L·∫•y danh s√°ch rank ph√π h·ª£p v·ªõi userRank (rankPriority <= userRankPriority)
    const allowedRanks = Object.entries(rankPriority)
      .filter(([rank, priority]) => priority <= userRankPriority)
      .map(([rank]) => rank);

    // L·∫•y voucher c√≥ applicableRanks trong allowedRanks
    const discounts = await Discount.find({
      isActive: true,
      isDelete: false,
      applicableRanks: { $in: allowedRanks },
      startDate: { $lte: currentDate },
      expirationDate: { $gt: currentDate },
      usedBy: { $ne: user._id },
    });

    if (discounts.length === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√° ph√π h·ª£p." });
    }

    // S·∫Øp x·∫øp ∆∞u ti√™n theo rank gi·∫£m d·∫ßn (cao nh·∫•t trong allowedRanks) v√† discountValue gi·∫£m d·∫ßn
    discounts.sort((a, b) => {
      // L·∫•y rankPriority cho voucher (gi·∫£ s·ª≠ m·ªói voucher c√≥ 1 rank trong applicableRanks)
      const aRankPriority = Math.max(
        ...a.applicableRanks.map((r) => rankPriority[r] || 0)
      );
      const bRankPriority = Math.max(
        ...b.applicableRanks.map((r) => rankPriority[r] || 0)
      );

      const rankDiff = bRankPriority - aRankPriority;
      if (rankDiff !== 0) return rankDiff;

      return b.discountValue - a.discountValue;
    });

    const bestDiscount = discounts[0];

    res.status(200).json({
      message: "L·∫•y m√£ gi·∫£m gi√° ph√π h·ª£p th√†nh c√¥ng.",
      data: {
        discount: bestDiscount,
      },
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói khi l·∫•y m√£ gi·∫£m gi√°." });
  }
};

module.exports = {
  getDiscounts,
  validateDiscountForUser,
  getSuitableDiscount,
};
